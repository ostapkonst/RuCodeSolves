#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<pair<int, pair<int, int>>> v;
vector<int> linkedarr;
int n, m;

void build_set (int v) {
	linkedarr[v] = v;
}

int find_set (int v) {
	if (v == linkedarr[v])
		return v;
	return linkedarr[v] = find_set(linkedarr[v]);
}

void union_sets (int a, int b) {
	int x = find_set (a);
	int y = find_set (b);
	if (x != y)
		linkedarr[y] = x;
}

int main() {
	int x, y, w, ans = 0;
	string command;

	cin >> n >> m;
	v.resize(m);
	linkedarr.resize(n);

	for (int i = 0; i < m; i++) {
		cin >> x >> y >> w;
		v[i].first = w;  v[i].second.first = x - 1; v[i].second.second = y - 1;
	}

	for (int i = 0; i < n; i++) {
		build_set(i);	
	}

	sort(v.begin(), v.end());

	for (int i = 0; i < m; i++) {
		int a = v[i].second.first;
		int b = v[i].second.second;
		int c = v[i].first;
		if (find_set(a) != find_set(b)) {
			ans += c;
			union_sets(a, b);
		}
	}

	cout <<  ans;

	return 0;
}